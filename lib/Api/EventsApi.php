<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addEvent
     *
     * Adds a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to add (just include JSON object as request body) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalendarEvent
     */
    public function addEvent($api_event)
    {
        list($response) = $this->addEventWithHttpInfo($api_event);
        return $response;
    }

    /**
     * Operation addEventWithHttpInfo
     *
     * Adds a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to add (just include JSON object as request body) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalendarEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEventWithHttpInfo($api_event)
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->addEventRequest($api_event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalendarEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addEventAsync
     *
     * Adds a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventAsync($api_event)
    {
        return $this->addEventAsyncWithHttpInfo($api_event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEventAsyncWithHttpInfo
     *
     * Adds a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventAsyncWithHttpInfo($api_event)
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->addEventRequest($api_event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEvent'
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addEventRequest($api_event)
    {
        // verify the required parameter 'api_event' is set
        if ($api_event === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_event when calling addEvent'
            );
        }

        $resourcePath = '/Events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($api_event)) {
            $_tempBody = $api_event;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEventLink
     *
     * Adds an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  \Swagger\Client\Model\APIEventLink $api_link The Event Link to add (just include JSON object as request body) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EventLink
     */
    public function addEventLink($id, $api_link)
    {
        list($response) = $this->addEventLinkWithHttpInfo($id, $api_link);
        return $response;
    }

    /**
     * Operation addEventLinkWithHttpInfo
     *
     * Adds an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  \Swagger\Client\Model\APIEventLink $api_link The Event Link to add (just include JSON object as request body) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EventLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEventLinkWithHttpInfo($id, $api_link)
    {
        $returnType = '\Swagger\Client\Model\EventLink';
        $request = $this->addEventLinkRequest($id, $api_link);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EventLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addEventLinkAsync
     *
     * Adds an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  \Swagger\Client\Model\APIEventLink $api_link The Event Link to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventLinkAsync($id, $api_link)
    {
        return $this->addEventLinkAsyncWithHttpInfo($id, $api_link)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEventLinkAsyncWithHttpInfo
     *
     * Adds an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  \Swagger\Client\Model\APIEventLink $api_link The Event Link to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEventLinkAsyncWithHttpInfo($id, $api_link)
    {
        $returnType = '\Swagger\Client\Model\EventLink';
        $request = $this->addEventLinkRequest($id, $api_link);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEventLink'
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  \Swagger\Client\Model\APIEventLink $api_link The Event Link to add (just include JSON object as request body) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addEventLinkRequest($id, $api_link)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addEventLink'
            );
        }
        // verify the required parameter 'api_link' is set
        if ($api_link === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_link when calling addEventLink'
            );
        }

        $resourcePath = '/Events/{id}/EventLinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($api_link)) {
            $_tempBody = $api_link;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEvent
     *
     * Deletes a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEvent($id)
    {
        $this->deleteEventWithHttpInfo($id);
    }

    /**
     * Operation deleteEventWithHttpInfo
     *
     * Deletes a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEventWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteEventRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEventAsync
     *
     * Deletes a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEventAsync($id)
    {
        return $this->deleteEventAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEventAsyncWithHttpInfo
     *
     * Deletes a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEventAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteEventRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEvent'
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEventRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEvent'
            );
        }

        $resourcePath = '/Events/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEventLink
     *
     * Deletes an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  int $link_id A EVENT Link&#39;s ID (EVENT_LINK_ID) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEventLink($id, $link_id)
    {
        $this->deleteEventLinkWithHttpInfo($id, $link_id);
    }

    /**
     * Operation deleteEventLinkWithHttpInfo
     *
     * Deletes an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  int $link_id A EVENT Link&#39;s ID (EVENT_LINK_ID) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEventLinkWithHttpInfo($id, $link_id)
    {
        $returnType = '';
        $request = $this->deleteEventLinkRequest($id, $link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEventLinkAsync
     *
     * Deletes an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  int $link_id A EVENT Link&#39;s ID (EVENT_LINK_ID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEventLinkAsync($id, $link_id)
    {
        return $this->deleteEventLinkAsyncWithHttpInfo($id, $link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEventLinkAsyncWithHttpInfo
     *
     * Deletes an Event Link
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  int $link_id A EVENT Link&#39;s ID (EVENT_LINK_ID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEventLinkAsyncWithHttpInfo($id, $link_id)
    {
        $returnType = '';
        $request = $this->deleteEventLinkRequest($id, $link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEventLink'
     *
     * @param  int $id An Event&#39;s ID (EVENT_ID) (required)
     * @param  int $link_id A EVENT Link&#39;s ID (EVENT_LINK_ID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEventLinkRequest($id, $link_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEventLink'
            );
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_id when calling deleteEventLink'
            );
        }

        $resourcePath = '/Events/{id}/EventLinks/{linkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'linkId' . '}',
                ObjectSerializer::toPathValue($link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvent
     *
     * Gets a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalendarEvent
     */
    public function getEvent($id)
    {
        list($response) = $this->getEventWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEventWithHttpInfo
     *
     * Gets a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalendarEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->getEventRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalendarEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventAsync
     *
     * Gets a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAsync($id)
    {
        return $this->getEventAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventAsyncWithHttpInfo
     *
     * Gets a Calendar Event
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->getEventRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvent'
     *
     * @param  int $id An Event&#39;s ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEvent'
            );
        }

        $resourcePath = '/Events/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvents
     *
     * Gets a list of Calendar Events.
     *
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalendarEvent[]
     */
    public function getEvents($brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        list($response) = $this->getEventsWithHttpInfo($brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Gets a list of Calendar Events.
     *
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalendarEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo($brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent[]';
        $request = $this->getEventsRequest($brief, $skip, $top, $count_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalendarEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsAsync
     *
     * Gets a list of Calendar Events.
     *
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsync($brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        return $this->getEventsAsyncWithHttpInfo($brief, $skip, $top, $count_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsAsyncWithHttpInfo
     *
     * Gets a list of Calendar Events.
     *
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsyncWithHttpInfo($brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent[]';
        $request = $this->getEventsRequest($brief, $skip, $top, $count_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvents'
     *
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsRequest($brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {

        $resourcePath = '/Events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($brief !== null) {
            $queryParams['brief'] = ObjectSerializer::toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = ObjectSerializer::toQueryValue($count_total);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsBySearch
     *
     * Gets a filtered list of Calendar Events.
     *
     * @param  string $title Optional, event title. (optional)
     * @param  int $owner_user_id Optional, id of the owner user. (optional)
     * @param  \DateTime $start_date_utc Optional, start date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $end_date_utc Optional, end date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $updated_after_utc Optional, earliest date when event was last updated. Date and time are considered. (optional)
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalendarEvent[]
     */
    public function getEventsBySearch($title = null, $owner_user_id = null, $start_date_utc = null, $end_date_utc = null, $updated_after_utc = null, $brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        list($response) = $this->getEventsBySearchWithHttpInfo($title, $owner_user_id, $start_date_utc, $end_date_utc, $updated_after_utc, $brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getEventsBySearchWithHttpInfo
     *
     * Gets a filtered list of Calendar Events.
     *
     * @param  string $title Optional, event title. (optional)
     * @param  int $owner_user_id Optional, id of the owner user. (optional)
     * @param  \DateTime $start_date_utc Optional, start date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $end_date_utc Optional, end date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $updated_after_utc Optional, earliest date when event was last updated. Date and time are considered. (optional)
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalendarEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsBySearchWithHttpInfo($title = null, $owner_user_id = null, $start_date_utc = null, $end_date_utc = null, $updated_after_utc = null, $brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent[]';
        $request = $this->getEventsBySearchRequest($title, $owner_user_id, $start_date_utc, $end_date_utc, $updated_after_utc, $brief, $skip, $top, $count_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalendarEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsBySearchAsync
     *
     * Gets a filtered list of Calendar Events.
     *
     * @param  string $title Optional, event title. (optional)
     * @param  int $owner_user_id Optional, id of the owner user. (optional)
     * @param  \DateTime $start_date_utc Optional, start date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $end_date_utc Optional, end date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $updated_after_utc Optional, earliest date when event was last updated. Date and time are considered. (optional)
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsBySearchAsync($title = null, $owner_user_id = null, $start_date_utc = null, $end_date_utc = null, $updated_after_utc = null, $brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        return $this->getEventsBySearchAsyncWithHttpInfo($title, $owner_user_id, $start_date_utc, $end_date_utc, $updated_after_utc, $brief, $skip, $top, $count_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsBySearchAsyncWithHttpInfo
     *
     * Gets a filtered list of Calendar Events.
     *
     * @param  string $title Optional, event title. (optional)
     * @param  int $owner_user_id Optional, id of the owner user. (optional)
     * @param  \DateTime $start_date_utc Optional, start date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $end_date_utc Optional, end date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $updated_after_utc Optional, earliest date when event was last updated. Date and time are considered. (optional)
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsBySearchAsyncWithHttpInfo($title = null, $owner_user_id = null, $start_date_utc = null, $end_date_utc = null, $updated_after_utc = null, $brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent[]';
        $request = $this->getEventsBySearchRequest($title, $owner_user_id, $start_date_utc, $end_date_utc, $updated_after_utc, $brief, $skip, $top, $count_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsBySearch'
     *
     * @param  string $title Optional, event title. (optional)
     * @param  int $owner_user_id Optional, id of the owner user. (optional)
     * @param  \DateTime $start_date_utc Optional, start date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $end_date_utc Optional, end date of the event. Only the date is considered, not the time. (optional)
     * @param  \DateTime $updated_after_utc Optional, earliest date when event was last updated. Date and time are considered. (optional)
     * @param  bool $brief Optional, true if response should only contain top level properties of the event. (optional, default to false)
     * @param  int $skip Optional, number of events to skip. (optional)
     * @param  int $top Optional, maximum number of events to return in the response. (optional)
     * @param  bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsBySearchRequest($title = null, $owner_user_id = null, $start_date_utc = null, $end_date_utc = null, $updated_after_utc = null, $brief = 'false', $skip = null, $top = null, $count_total = 'false')
    {

        $resourcePath = '/Events/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($owner_user_id !== null) {
            $queryParams['owner_user_id'] = ObjectSerializer::toQueryValue($owner_user_id);
        }
        // query params
        if ($start_date_utc !== null) {
            $queryParams['start_date_utc'] = ObjectSerializer::toQueryValue($start_date_utc);
        }
        // query params
        if ($end_date_utc !== null) {
            $queryParams['end_date_utc'] = ObjectSerializer::toQueryValue($end_date_utc);
        }
        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = ObjectSerializer::toQueryValue($updated_after_utc);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = ObjectSerializer::toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = ObjectSerializer::toQueryValue($count_total);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEvent
     *
     * Updates a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to update (just include JSON object as request body) (required)
     * @param  bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalendarEvent
     */
    public function updateEvent($api_event, $brief = 'false')
    {
        list($response) = $this->updateEventWithHttpInfo($api_event, $brief);
        return $response;
    }

    /**
     * Operation updateEventWithHttpInfo
     *
     * Updates a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to update (just include JSON object as request body) (required)
     * @param  bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalendarEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEventWithHttpInfo($api_event, $brief = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->updateEventRequest($api_event, $brief);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalendarEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEventAsync
     *
     * Updates a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to update (just include JSON object as request body) (required)
     * @param  bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventAsync($api_event, $brief = 'false')
    {
        return $this->updateEventAsyncWithHttpInfo($api_event, $brief)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEventAsyncWithHttpInfo
     *
     * Updates a Calendar Event
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to update (just include JSON object as request body) (required)
     * @param  bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventAsyncWithHttpInfo($api_event, $brief = 'false')
    {
        $returnType = '\Swagger\Client\Model\CalendarEvent';
        $request = $this->updateEventRequest($api_event, $brief);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEvent'
     *
     * @param  \Swagger\Client\Model\APICalendarEvent $api_event The Event to update (just include JSON object as request body) (required)
     * @param  bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEventRequest($api_event, $brief = 'false')
    {
        // verify the required parameter 'api_event' is set
        if ($api_event === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_event when calling updateEvent'
            );
        }

        $resourcePath = '/Events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($brief !== null) {
            $queryParams['brief'] = ObjectSerializer::toQueryValue($brief);
        }


        // body params
        $_tempBody = null;
        if (isset($api_event)) {
            $_tempBody = $api_event;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
