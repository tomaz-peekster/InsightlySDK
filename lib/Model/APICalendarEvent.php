<?php
/**
 * APICalendarEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * APICalendarEvent Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APICalendarEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APICalendarEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_id' => 'int',
        'title' => 'string',
        'location' => 'string',
        'details' => 'string',
        'start_date_utc' => '\DateTime',
        'end_date_utc' => '\DateTime',
        'all_day' => 'bool',
        'publicly_visible' => 'bool',
        'reminder_date_utc' => '\DateTime',
        'reminder_sent' => 'bool',
        'eventlinks' => '\Swagger\Client\Model\APIEventLink[]',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'can_edit' => 'bool',
        'can_delete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_id' => 'int64',
        'title' => null,
        'location' => null,
        'details' => null,
        'start_date_utc' => 'date-time',
        'end_date_utc' => 'date-time',
        'all_day' => null,
        'publicly_visible' => null,
        'reminder_date_utc' => 'date-time',
        'reminder_sent' => null,
        'eventlinks' => null,
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time',
        'can_edit' => null,
        'can_delete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'EVENT_ID',
        'title' => 'TITLE',
        'location' => 'LOCATION',
        'details' => 'DETAILS',
        'start_date_utc' => 'START_DATE_UTC',
        'end_date_utc' => 'END_DATE_UTC',
        'all_day' => 'ALL_DAY',
        'publicly_visible' => 'PUBLICLY_VISIBLE',
        'reminder_date_utc' => 'REMINDER_DATE_UTC',
        'reminder_sent' => 'REMINDER_SENT',
        'eventlinks' => 'EVENTLINKS',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'can_edit' => 'CAN_EDIT',
        'can_delete' => 'CAN_DELETE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'title' => 'setTitle',
        'location' => 'setLocation',
        'details' => 'setDetails',
        'start_date_utc' => 'setStartDateUtc',
        'end_date_utc' => 'setEndDateUtc',
        'all_day' => 'setAllDay',
        'publicly_visible' => 'setPubliclyVisible',
        'reminder_date_utc' => 'setReminderDateUtc',
        'reminder_sent' => 'setReminderSent',
        'eventlinks' => 'setEventlinks',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'can_edit' => 'setCanEdit',
        'can_delete' => 'setCanDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'title' => 'getTitle',
        'location' => 'getLocation',
        'details' => 'getDetails',
        'start_date_utc' => 'getStartDateUtc',
        'end_date_utc' => 'getEndDateUtc',
        'all_day' => 'getAllDay',
        'publicly_visible' => 'getPubliclyVisible',
        'reminder_date_utc' => 'getReminderDateUtc',
        'reminder_sent' => 'getReminderSent',
        'eventlinks' => 'getEventlinks',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'can_edit' => 'getCanEdit',
        'can_delete' => 'getCanDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['start_date_utc'] = isset($data['start_date_utc']) ? $data['start_date_utc'] : null;
        $this->container['end_date_utc'] = isset($data['end_date_utc']) ? $data['end_date_utc'] : null;
        $this->container['all_day'] = isset($data['all_day']) ? $data['all_day'] : null;
        $this->container['publicly_visible'] = isset($data['publicly_visible']) ? $data['publicly_visible'] : null;
        $this->container['reminder_date_utc'] = isset($data['reminder_date_utc']) ? $data['reminder_date_utc'] : null;
        $this->container['reminder_sent'] = isset($data['reminder_sent']) ? $data['reminder_sent'] : null;
        $this->container['eventlinks'] = isset($data['eventlinks']) ? $data['eventlinks'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['location']) && (strlen($this->container['location']) > 255)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['location']) && (strlen($this->container['location']) < 0)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['details']) && (strlen($this->container['details']) > 4000)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['details']) && (strlen($this->container['details']) < 0)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['start_date_utc'] === null) {
            $invalidProperties[] = "'start_date_utc' can't be null";
        }
        if ($this->container['end_date_utc'] === null) {
            $invalidProperties[] = "'end_date_utc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['title'] === null) {
            return false;
        }
        if (strlen($this->container['title']) > 255) {
            return false;
        }
        if (strlen($this->container['title']) < 0) {
            return false;
        }
        if (strlen($this->container['location']) > 255) {
            return false;
        }
        if (strlen($this->container['location']) < 0) {
            return false;
        }
        if (strlen($this->container['details']) > 4000) {
            return false;
        }
        if (strlen($this->container['details']) < 0) {
            return false;
        }
        if ($this->container['start_date_utc'] === null) {
            return false;
        }
        if ($this->container['end_date_utc'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets event_id
     *
     * @return int
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param int $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling APICalendarEvent., must be smaller than or equal to 255.');
        }
        if ((strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling APICalendarEvent., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (strlen($location) > 255)) {
            throw new \InvalidArgumentException('invalid length for $location when calling APICalendarEvent., must be smaller than or equal to 255.');
        }
        if (!is_null($location) && (strlen($location) < 0)) {
            throw new \InvalidArgumentException('invalid length for $location when calling APICalendarEvent., must be bigger than or equal to 0.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        if (!is_null($details) && (strlen($details) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $details when calling APICalendarEvent., must be smaller than or equal to 4000.');
        }
        if (!is_null($details) && (strlen($details) < 0)) {
            throw new \InvalidArgumentException('invalid length for $details when calling APICalendarEvent., must be bigger than or equal to 0.');
        }

        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets start_date_utc
     *
     * @return \DateTime
     */
    public function getStartDateUtc()
    {
        return $this->container['start_date_utc'];
    }

    /**
     * Sets start_date_utc
     *
     * @param \DateTime $start_date_utc start_date_utc
     *
     * @return $this
     */
    public function setStartDateUtc($start_date_utc)
    {
        $this->container['start_date_utc'] = $start_date_utc;

        return $this;
    }

    /**
     * Gets end_date_utc
     *
     * @return \DateTime
     */
    public function getEndDateUtc()
    {
        return $this->container['end_date_utc'];
    }

    /**
     * Sets end_date_utc
     *
     * @param \DateTime $end_date_utc end_date_utc
     *
     * @return $this
     */
    public function setEndDateUtc($end_date_utc)
    {
        $this->container['end_date_utc'] = $end_date_utc;

        return $this;
    }

    /**
     * Gets all_day
     *
     * @return bool
     */
    public function getAllDay()
    {
        return $this->container['all_day'];
    }

    /**
     * Sets all_day
     *
     * @param bool $all_day all_day
     *
     * @return $this
     */
    public function setAllDay($all_day)
    {
        $this->container['all_day'] = $all_day;

        return $this;
    }

    /**
     * Gets publicly_visible
     *
     * @return bool
     */
    public function getPubliclyVisible()
    {
        return $this->container['publicly_visible'];
    }

    /**
     * Sets publicly_visible
     *
     * @param bool $publicly_visible publicly_visible
     *
     * @return $this
     */
    public function setPubliclyVisible($publicly_visible)
    {
        $this->container['publicly_visible'] = $publicly_visible;

        return $this;
    }

    /**
     * Gets reminder_date_utc
     *
     * @return \DateTime
     */
    public function getReminderDateUtc()
    {
        return $this->container['reminder_date_utc'];
    }

    /**
     * Sets reminder_date_utc
     *
     * @param \DateTime $reminder_date_utc reminder_date_utc
     *
     * @return $this
     */
    public function setReminderDateUtc($reminder_date_utc)
    {
        $this->container['reminder_date_utc'] = $reminder_date_utc;

        return $this;
    }

    /**
     * Gets reminder_sent
     *
     * @return bool
     */
    public function getReminderSent()
    {
        return $this->container['reminder_sent'];
    }

    /**
     * Sets reminder_sent
     *
     * @param bool $reminder_sent reminder_sent
     *
     * @return $this
     */
    public function setReminderSent($reminder_sent)
    {
        $this->container['reminder_sent'] = $reminder_sent;

        return $this;
    }

    /**
     * Gets eventlinks
     *
     * @return \Swagger\Client\Model\APIEventLink[]
     */
    public function getEventlinks()
    {
        return $this->container['eventlinks'];
    }

    /**
     * Sets eventlinks
     *
     * @param \Swagger\Client\Model\APIEventLink[] $eventlinks eventlinks
     *
     * @return $this
     */
    public function setEventlinks($eventlinks)
    {
        $this->container['eventlinks'] = $eventlinks;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit can_edit
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete can_delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

