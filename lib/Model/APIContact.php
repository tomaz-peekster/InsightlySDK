<?php
/**
 * APIContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * APIContact Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APIContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_id' => 'int',
        'salutation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'background' => 'string',
        'image_url' => 'string',
        'default_linked_organisation' => 'int',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'visible_to' => 'string',
        'visible_team_id' => 'int',
        'visible_user_ids' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]',
        'addresses' => '\Swagger\Client\Model\APIAddress[]',
        'contactinfos' => '\Swagger\Client\Model\APIContactInfo[]',
        'dates' => '\Swagger\Client\Model\APIContactDate[]',
        'tags' => '\Swagger\Client\Model\APITag[]',
        'links' => '\Swagger\Client\Model\APILink[]',
        'contactlinks' => '\Swagger\Client\Model\APIContactLink[]',
        'can_edit' => 'bool',
        'can_delete' => 'bool',
        'social_linkedin' => 'string',
        'social_facebook' => 'string',
        'social_twitter' => 'string',
        'assistant_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_id' => 'int64',
        'salutation' => null,
        'first_name' => null,
        'last_name' => null,
        'background' => null,
        'image_url' => null,
        'default_linked_organisation' => 'int64',
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time',
        'visible_to' => null,
        'visible_team_id' => 'int64',
        'visible_user_ids' => null,
        'customfields' => null,
        'addresses' => null,
        'contactinfos' => null,
        'dates' => null,
        'tags' => null,
        'links' => null,
        'contactlinks' => null,
        'can_edit' => null,
        'can_delete' => null,
        'social_linkedin' => null,
        'social_facebook' => null,
        'social_twitter' => null,
        'assistant_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_id' => 'CONTACT_ID',
        'salutation' => 'SALUTATION',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'background' => 'BACKGROUND',
        'image_url' => 'IMAGE_URL',
        'default_linked_organisation' => 'DEFAULT_LINKED_ORGANISATION',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'visible_to' => 'VISIBLE_TO',
        'visible_team_id' => 'VISIBLE_TEAM_ID',
        'visible_user_ids' => 'VISIBLE_USER_IDS',
        'customfields' => 'CUSTOMFIELDS',
        'addresses' => 'ADDRESSES',
        'contactinfos' => 'CONTACTINFOS',
        'dates' => 'DATES',
        'tags' => 'TAGS',
        'links' => 'LINKS',
        'contactlinks' => 'CONTACTLINKS',
        'can_edit' => 'CAN_EDIT',
        'can_delete' => 'CAN_DELETE',
        'social_linkedin' => 'SOCIAL_LINKEDIN',
        'social_facebook' => 'SOCIAL_FACEBOOK',
        'social_twitter' => 'SOCIAL_TWITTER',
        'assistant_name' => 'ASSISTANT_NAME'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_id' => 'setContactId',
        'salutation' => 'setSalutation',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'background' => 'setBackground',
        'image_url' => 'setImageUrl',
        'default_linked_organisation' => 'setDefaultLinkedOrganisation',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'visible_to' => 'setVisibleTo',
        'visible_team_id' => 'setVisibleTeamId',
        'visible_user_ids' => 'setVisibleUserIds',
        'customfields' => 'setCustomfields',
        'addresses' => 'setAddresses',
        'contactinfos' => 'setContactinfos',
        'dates' => 'setDates',
        'tags' => 'setTags',
        'links' => 'setLinks',
        'contactlinks' => 'setContactlinks',
        'can_edit' => 'setCanEdit',
        'can_delete' => 'setCanDelete',
        'social_linkedin' => 'setSocialLinkedin',
        'social_facebook' => 'setSocialFacebook',
        'social_twitter' => 'setSocialTwitter',
        'assistant_name' => 'setAssistantName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_id' => 'getContactId',
        'salutation' => 'getSalutation',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'background' => 'getBackground',
        'image_url' => 'getImageUrl',
        'default_linked_organisation' => 'getDefaultLinkedOrganisation',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'visible_to' => 'getVisibleTo',
        'visible_team_id' => 'getVisibleTeamId',
        'visible_user_ids' => 'getVisibleUserIds',
        'customfields' => 'getCustomfields',
        'addresses' => 'getAddresses',
        'contactinfos' => 'getContactinfos',
        'dates' => 'getDates',
        'tags' => 'getTags',
        'links' => 'getLinks',
        'contactlinks' => 'getContactlinks',
        'can_edit' => 'getCanEdit',
        'can_delete' => 'getCanDelete',
        'social_linkedin' => 'getSocialLinkedin',
        'social_facebook' => 'getSocialFacebook',
        'social_twitter' => 'getSocialTwitter',
        'assistant_name' => 'getAssistantName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['default_linked_organisation'] = isset($data['default_linked_organisation']) ? $data['default_linked_organisation'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['visible_to'] = isset($data['visible_to']) ? $data['visible_to'] : null;
        $this->container['visible_team_id'] = isset($data['visible_team_id']) ? $data['visible_team_id'] : null;
        $this->container['visible_user_ids'] = isset($data['visible_user_ids']) ? $data['visible_user_ids'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['contactinfos'] = isset($data['contactinfos']) ? $data['contactinfos'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['contactlinks'] = isset($data['contactlinks']) ? $data['contactlinks'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['social_linkedin'] = isset($data['social_linkedin']) ? $data['social_linkedin'] : null;
        $this->container['social_facebook'] = isset($data['social_facebook']) ? $data['social_facebook'] : null;
        $this->container['social_twitter'] = isset($data['social_twitter']) ? $data['social_twitter'] : null;
        $this->container['assistant_name'] = isset($data['assistant_name']) ? $data['assistant_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) > 50)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) < 0)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['background']) && (strlen($this->container['background']) > 4000)) {
            $invalidProperties[] = "invalid value for 'background', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['background']) && (strlen($this->container['background']) < 0)) {
            $invalidProperties[] = "invalid value for 'background', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['social_linkedin']) && (strlen($this->container['social_linkedin']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_linkedin', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_linkedin']) && (strlen($this->container['social_linkedin']) < 0)) {
            $invalidProperties[] = "invalid value for 'social_linkedin', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['social_facebook']) && (strlen($this->container['social_facebook']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_facebook', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_facebook']) && (strlen($this->container['social_facebook']) < 0)) {
            $invalidProperties[] = "invalid value for 'social_facebook', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['social_twitter']) && (strlen($this->container['social_twitter']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_twitter', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_twitter']) && (strlen($this->container['social_twitter']) < 0)) {
            $invalidProperties[] = "invalid value for 'social_twitter', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['assistant_name']) && (strlen($this->container['assistant_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'assistant_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['assistant_name']) && (strlen($this->container['assistant_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'assistant_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['salutation']) > 50) {
            return false;
        }
        if (strlen($this->container['salutation']) < 0) {
            return false;
        }
        if (strlen($this->container['first_name']) > 255) {
            return false;
        }
        if (strlen($this->container['first_name']) < 0) {
            return false;
        }
        if (strlen($this->container['last_name']) > 255) {
            return false;
        }
        if (strlen($this->container['last_name']) < 0) {
            return false;
        }
        if (strlen($this->container['background']) > 4000) {
            return false;
        }
        if (strlen($this->container['background']) < 0) {
            return false;
        }
        if (strlen($this->container['image_url']) > 255) {
            return false;
        }
        if (strlen($this->container['image_url']) < 0) {
            return false;
        }
        if (strlen($this->container['social_linkedin']) > 255) {
            return false;
        }
        if (strlen($this->container['social_linkedin']) < 0) {
            return false;
        }
        if (strlen($this->container['social_facebook']) > 255) {
            return false;
        }
        if (strlen($this->container['social_facebook']) < 0) {
            return false;
        }
        if (strlen($this->container['social_twitter']) > 255) {
            return false;
        }
        if (strlen($this->container['social_twitter']) < 0) {
            return false;
        }
        if (strlen($this->container['assistant_name']) > 255) {
            return false;
        }
        if (strlen($this->container['assistant_name']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        if (!is_null($salutation) && (strlen($salutation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling APIContact., must be smaller than or equal to 50.');
        }
        if (!is_null($salutation) && (strlen($salutation) < 0)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($first_name) && (strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($last_name) && (strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background background
     *
     * @return $this
     */
    public function setBackground($background)
    {
        if (!is_null($background) && (strlen($background) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $background when calling APIContact., must be smaller than or equal to 4000.');
        }
        if (!is_null($background) && (strlen($background) < 0)) {
            throw new \InvalidArgumentException('invalid length for $background when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (strlen($image_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($image_url) && (strlen($image_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets default_linked_organisation
     *
     * @return int
     */
    public function getDefaultLinkedOrganisation()
    {
        return $this->container['default_linked_organisation'];
    }

    /**
     * Sets default_linked_organisation
     *
     * @param int $default_linked_organisation default_linked_organisation
     *
     * @return $this
     */
    public function setDefaultLinkedOrganisation($default_linked_organisation)
    {
        $this->container['default_linked_organisation'] = $default_linked_organisation;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets visible_to
     *
     * @return string
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     *
     * @param string $visible_to visible_to
     *
     * @return $this
     */
    public function setVisibleTo($visible_to)
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets visible_team_id
     *
     * @return int
     */
    public function getVisibleTeamId()
    {
        return $this->container['visible_team_id'];
    }

    /**
     * Sets visible_team_id
     *
     * @param int $visible_team_id visible_team_id
     *
     * @return $this
     */
    public function setVisibleTeamId($visible_team_id)
    {
        $this->container['visible_team_id'] = $visible_team_id;

        return $this;
    }

    /**
     * Gets visible_user_ids
     *
     * @return string
     */
    public function getVisibleUserIds()
    {
        return $this->container['visible_user_ids'];
    }

    /**
     * Sets visible_user_ids
     *
     * @param string $visible_user_ids visible_user_ids
     *
     * @return $this
     */
    public function setVisibleUserIds($visible_user_ids)
    {
        $this->container['visible_user_ids'] = $visible_user_ids;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \Swagger\Client\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\APIAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\APIAddress[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets contactinfos
     *
     * @return \Swagger\Client\Model\APIContactInfo[]
     */
    public function getContactinfos()
    {
        return $this->container['contactinfos'];
    }

    /**
     * Sets contactinfos
     *
     * @param \Swagger\Client\Model\APIContactInfo[] $contactinfos contactinfos
     *
     * @return $this
     */
    public function setContactinfos($contactinfos)
    {
        $this->container['contactinfos'] = $contactinfos;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \Swagger\Client\Model\APIContactDate[]
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \Swagger\Client\Model\APIContactDate[] $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\APITag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\APILink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\APILink[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets contactlinks
     *
     * @return \Swagger\Client\Model\APIContactLink[]
     */
    public function getContactlinks()
    {
        return $this->container['contactlinks'];
    }

    /**
     * Sets contactlinks
     *
     * @param \Swagger\Client\Model\APIContactLink[] $contactlinks contactlinks
     *
     * @return $this
     */
    public function setContactlinks($contactlinks)
    {
        $this->container['contactlinks'] = $contactlinks;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit can_edit
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete can_delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets social_linkedin
     *
     * @return string
     */
    public function getSocialLinkedin()
    {
        return $this->container['social_linkedin'];
    }

    /**
     * Sets social_linkedin
     *
     * @param string $social_linkedin social_linkedin
     *
     * @return $this
     */
    public function setSocialLinkedin($social_linkedin)
    {
        if (!is_null($social_linkedin) && (strlen($social_linkedin) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_linkedin when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($social_linkedin) && (strlen($social_linkedin) < 0)) {
            throw new \InvalidArgumentException('invalid length for $social_linkedin when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['social_linkedin'] = $social_linkedin;

        return $this;
    }

    /**
     * Gets social_facebook
     *
     * @return string
     */
    public function getSocialFacebook()
    {
        return $this->container['social_facebook'];
    }

    /**
     * Sets social_facebook
     *
     * @param string $social_facebook social_facebook
     *
     * @return $this
     */
    public function setSocialFacebook($social_facebook)
    {
        if (!is_null($social_facebook) && (strlen($social_facebook) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_facebook when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($social_facebook) && (strlen($social_facebook) < 0)) {
            throw new \InvalidArgumentException('invalid length for $social_facebook when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['social_facebook'] = $social_facebook;

        return $this;
    }

    /**
     * Gets social_twitter
     *
     * @return string
     */
    public function getSocialTwitter()
    {
        return $this->container['social_twitter'];
    }

    /**
     * Sets social_twitter
     *
     * @param string $social_twitter social_twitter
     *
     * @return $this
     */
    public function setSocialTwitter($social_twitter)
    {
        if (!is_null($social_twitter) && (strlen($social_twitter) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_twitter when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($social_twitter) && (strlen($social_twitter) < 0)) {
            throw new \InvalidArgumentException('invalid length for $social_twitter when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['social_twitter'] = $social_twitter;

        return $this;
    }

    /**
     * Gets assistant_name
     *
     * @return string
     */
    public function getAssistantName()
    {
        return $this->container['assistant_name'];
    }

    /**
     * Sets assistant_name
     *
     * @param string $assistant_name assistant_name
     *
     * @return $this
     */
    public function setAssistantName($assistant_name)
    {
        if (!is_null($assistant_name) && (strlen($assistant_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $assistant_name when calling APIContact., must be smaller than or equal to 255.');
        }
        if (!is_null($assistant_name) && (strlen($assistant_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $assistant_name when calling APIContact., must be bigger than or equal to 0.');
        }

        $this->container['assistant_name'] = $assistant_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

