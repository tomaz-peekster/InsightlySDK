<?php
/**
 * APILead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * APILead Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APILead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APILead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lead_id' => 'int',
        'salutation' => 'string',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'organization_name' => 'string',
        'phone_number' => 'string',
        'mobile_phone_number' => 'string',
        'fax_number' => 'string',
        'email_address' => 'string',
        'website_url' => 'string',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'converted' => 'bool',
        'converted_date_utc' => '\DateTime',
        'converted_contact_id' => 'int',
        'converted_organization_id' => 'int',
        'converted_opportunity_id' => 'int',
        'visible_to' => 'string',
        'responsible_user_id' => 'int',
        'industry' => 'string',
        'lead_status_id' => 'int',
        'lead_source_id' => 'int',
        'visible_team_id' => 'int',
        'employee_count' => 'int',
        'lead_rating' => 'int',
        'lead_description' => 'string',
        'visible_user_ids' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]',
        'address_street' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postcode' => 'string',
        'address_country' => 'string',
        'tags' => '\Swagger\Client\Model\APITag[]',
        'image_url' => 'string',
        'can_edit' => 'bool',
        'can_delete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lead_id' => 'int64',
        'salutation' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'organization_name' => null,
        'phone_number' => null,
        'mobile_phone_number' => null,
        'fax_number' => null,
        'email_address' => null,
        'website_url' => null,
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time',
        'converted' => null,
        'converted_date_utc' => 'date-time',
        'converted_contact_id' => 'int64',
        'converted_organization_id' => 'int64',
        'converted_opportunity_id' => 'int64',
        'visible_to' => null,
        'responsible_user_id' => 'int32',
        'industry' => null,
        'lead_status_id' => 'int64',
        'lead_source_id' => 'int64',
        'visible_team_id' => 'int64',
        'employee_count' => 'int32',
        'lead_rating' => 'int32',
        'lead_description' => null,
        'visible_user_ids' => null,
        'customfields' => null,
        'address_street' => null,
        'address_city' => null,
        'address_state' => null,
        'address_postcode' => null,
        'address_country' => null,
        'tags' => null,
        'image_url' => null,
        'can_edit' => null,
        'can_delete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lead_id' => 'LEAD_ID',
        'salutation' => 'SALUTATION',
        'title' => 'TITLE',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'organization_name' => 'ORGANIZATION_NAME',
        'phone_number' => 'PHONE_NUMBER',
        'mobile_phone_number' => 'MOBILE_PHONE_NUMBER',
        'fax_number' => 'FAX_NUMBER',
        'email_address' => 'EMAIL_ADDRESS',
        'website_url' => 'WEBSITE_URL',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'converted' => 'CONVERTED',
        'converted_date_utc' => 'CONVERTED_DATE_UTC',
        'converted_contact_id' => 'CONVERTED_CONTACT_ID',
        'converted_organization_id' => 'CONVERTED_ORGANIZATION_ID',
        'converted_opportunity_id' => 'CONVERTED_OPPORTUNITY_ID',
        'visible_to' => 'VISIBLE_TO',
        'responsible_user_id' => 'RESPONSIBLE_USER_ID',
        'industry' => 'INDUSTRY',
        'lead_status_id' => 'LEAD_STATUS_ID',
        'lead_source_id' => 'LEAD_SOURCE_ID',
        'visible_team_id' => 'VISIBLE_TEAM_ID',
        'employee_count' => 'EMPLOYEE_COUNT',
        'lead_rating' => 'LEAD_RATING',
        'lead_description' => 'LEAD_DESCRIPTION',
        'visible_user_ids' => 'VISIBLE_USER_IDS',
        'customfields' => 'CUSTOMFIELDS',
        'address_street' => 'ADDRESS_STREET',
        'address_city' => 'ADDRESS_CITY',
        'address_state' => 'ADDRESS_STATE',
        'address_postcode' => 'ADDRESS_POSTCODE',
        'address_country' => 'ADDRESS_COUNTRY',
        'tags' => 'TAGS',
        'image_url' => 'IMAGE_URL',
        'can_edit' => 'CAN_EDIT',
        'can_delete' => 'CAN_DELETE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lead_id' => 'setLeadId',
        'salutation' => 'setSalutation',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'organization_name' => 'setOrganizationName',
        'phone_number' => 'setPhoneNumber',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'fax_number' => 'setFaxNumber',
        'email_address' => 'setEmailAddress',
        'website_url' => 'setWebsiteUrl',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'converted' => 'setConverted',
        'converted_date_utc' => 'setConvertedDateUtc',
        'converted_contact_id' => 'setConvertedContactId',
        'converted_organization_id' => 'setConvertedOrganizationId',
        'converted_opportunity_id' => 'setConvertedOpportunityId',
        'visible_to' => 'setVisibleTo',
        'responsible_user_id' => 'setResponsibleUserId',
        'industry' => 'setIndustry',
        'lead_status_id' => 'setLeadStatusId',
        'lead_source_id' => 'setLeadSourceId',
        'visible_team_id' => 'setVisibleTeamId',
        'employee_count' => 'setEmployeeCount',
        'lead_rating' => 'setLeadRating',
        'lead_description' => 'setLeadDescription',
        'visible_user_ids' => 'setVisibleUserIds',
        'customfields' => 'setCustomfields',
        'address_street' => 'setAddressStreet',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_postcode' => 'setAddressPostcode',
        'address_country' => 'setAddressCountry',
        'tags' => 'setTags',
        'image_url' => 'setImageUrl',
        'can_edit' => 'setCanEdit',
        'can_delete' => 'setCanDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lead_id' => 'getLeadId',
        'salutation' => 'getSalutation',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'organization_name' => 'getOrganizationName',
        'phone_number' => 'getPhoneNumber',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'fax_number' => 'getFaxNumber',
        'email_address' => 'getEmailAddress',
        'website_url' => 'getWebsiteUrl',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'converted' => 'getConverted',
        'converted_date_utc' => 'getConvertedDateUtc',
        'converted_contact_id' => 'getConvertedContactId',
        'converted_organization_id' => 'getConvertedOrganizationId',
        'converted_opportunity_id' => 'getConvertedOpportunityId',
        'visible_to' => 'getVisibleTo',
        'responsible_user_id' => 'getResponsibleUserId',
        'industry' => 'getIndustry',
        'lead_status_id' => 'getLeadStatusId',
        'lead_source_id' => 'getLeadSourceId',
        'visible_team_id' => 'getVisibleTeamId',
        'employee_count' => 'getEmployeeCount',
        'lead_rating' => 'getLeadRating',
        'lead_description' => 'getLeadDescription',
        'visible_user_ids' => 'getVisibleUserIds',
        'customfields' => 'getCustomfields',
        'address_street' => 'getAddressStreet',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_postcode' => 'getAddressPostcode',
        'address_country' => 'getAddressCountry',
        'tags' => 'getTags',
        'image_url' => 'getImageUrl',
        'can_edit' => 'getCanEdit',
        'can_delete' => 'getCanDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lead_id'] = isset($data['lead_id']) ? $data['lead_id'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_phone_number'] = isset($data['mobile_phone_number']) ? $data['mobile_phone_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['converted'] = isset($data['converted']) ? $data['converted'] : null;
        $this->container['converted_date_utc'] = isset($data['converted_date_utc']) ? $data['converted_date_utc'] : null;
        $this->container['converted_contact_id'] = isset($data['converted_contact_id']) ? $data['converted_contact_id'] : null;
        $this->container['converted_organization_id'] = isset($data['converted_organization_id']) ? $data['converted_organization_id'] : null;
        $this->container['converted_opportunity_id'] = isset($data['converted_opportunity_id']) ? $data['converted_opportunity_id'] : null;
        $this->container['visible_to'] = isset($data['visible_to']) ? $data['visible_to'] : null;
        $this->container['responsible_user_id'] = isset($data['responsible_user_id']) ? $data['responsible_user_id'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['lead_status_id'] = isset($data['lead_status_id']) ? $data['lead_status_id'] : null;
        $this->container['lead_source_id'] = isset($data['lead_source_id']) ? $data['lead_source_id'] : null;
        $this->container['visible_team_id'] = isset($data['visible_team_id']) ? $data['visible_team_id'] : null;
        $this->container['employee_count'] = isset($data['employee_count']) ? $data['employee_count'] : null;
        $this->container['lead_rating'] = isset($data['lead_rating']) ? $data['lead_rating'] : null;
        $this->container['lead_description'] = isset($data['lead_description']) ? $data['lead_description'] : null;
        $this->container['visible_user_ids'] = isset($data['visible_user_ids']) ? $data['visible_user_ids'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_state'] = isset($data['address_state']) ? $data['address_state'] : null;
        $this->container['address_postcode'] = isset($data['address_postcode']) ? $data['address_postcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) > 50)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) < 0)) {
            $invalidProperties[] = "invalid value for 'salutation', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((strlen($this->container['last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['organization_name']) && (strlen($this->container['organization_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'organization_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['organization_name']) && (strlen($this->container['organization_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'organization_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (strlen($this->container['mobile_phone_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (strlen($this->container['mobile_phone_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_address']) && (strlen($this->container['email_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_address']) && (strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['industry']) && (strlen($this->container['industry']) > 128)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['industry']) && (strlen($this->container['industry']) < 0)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lead_description']) && (strlen($this->container['lead_description']) > 4000)) {
            $invalidProperties[] = "invalid value for 'lead_description', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['lead_description']) && (strlen($this->container['lead_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'lead_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_street']) && (strlen($this->container['address_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_street']) && (strlen($this->container['address_street']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_street', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_city']) && (strlen($this->container['address_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_city']) && (strlen($this->container['address_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_state']) && (strlen($this->container['address_state']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_state']) && (strlen($this->container['address_state']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_state', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_postcode']) && (strlen($this->container['address_postcode']) > 128)) {
            $invalidProperties[] = "invalid value for 'address_postcode', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['address_postcode']) && (strlen($this->container['address_postcode']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_postcode', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_country']) && (strlen($this->container['address_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_country']) && (strlen($this->container['address_country']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['salutation']) > 50) {
            return false;
        }
        if (strlen($this->container['salutation']) < 0) {
            return false;
        }
        if (strlen($this->container['title']) > 255) {
            return false;
        }
        if (strlen($this->container['title']) < 0) {
            return false;
        }
        if (strlen($this->container['first_name']) > 255) {
            return false;
        }
        if (strlen($this->container['first_name']) < 0) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if (strlen($this->container['last_name']) > 255) {
            return false;
        }
        if (strlen($this->container['last_name']) < 0) {
            return false;
        }
        if (strlen($this->container['organization_name']) > 255) {
            return false;
        }
        if (strlen($this->container['organization_name']) < 0) {
            return false;
        }
        if (strlen($this->container['phone_number']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_number']) < 0) {
            return false;
        }
        if (strlen($this->container['mobile_phone_number']) > 255) {
            return false;
        }
        if (strlen($this->container['mobile_phone_number']) < 0) {
            return false;
        }
        if (strlen($this->container['fax_number']) > 255) {
            return false;
        }
        if (strlen($this->container['fax_number']) < 0) {
            return false;
        }
        if (strlen($this->container['email_address']) > 255) {
            return false;
        }
        if (strlen($this->container['email_address']) < 0) {
            return false;
        }
        if (strlen($this->container['website_url']) > 255) {
            return false;
        }
        if (strlen($this->container['website_url']) < 0) {
            return false;
        }
        if (strlen($this->container['industry']) > 128) {
            return false;
        }
        if (strlen($this->container['industry']) < 0) {
            return false;
        }
        if (strlen($this->container['lead_description']) > 4000) {
            return false;
        }
        if (strlen($this->container['lead_description']) < 0) {
            return false;
        }
        if (strlen($this->container['address_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_street']) < 0) {
            return false;
        }
        if (strlen($this->container['address_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_city']) < 0) {
            return false;
        }
        if (strlen($this->container['address_state']) > 255) {
            return false;
        }
        if (strlen($this->container['address_state']) < 0) {
            return false;
        }
        if (strlen($this->container['address_postcode']) > 128) {
            return false;
        }
        if (strlen($this->container['address_postcode']) < 0) {
            return false;
        }
        if (strlen($this->container['address_country']) > 255) {
            return false;
        }
        if (strlen($this->container['address_country']) < 0) {
            return false;
        }
        if (strlen($this->container['image_url']) > 255) {
            return false;
        }
        if (strlen($this->container['image_url']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets lead_id
     *
     * @return int
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     *
     * @param int $lead_id lead_id
     *
     * @return $this
     */
    public function setLeadId($lead_id)
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        if (!is_null($salutation) && (strlen($salutation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling APILead., must be smaller than or equal to 50.');
        }
        if (!is_null($salutation) && (strlen($salutation) < 0)) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($title) && (strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (strlen($first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($first_name) && (strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((strlen($last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling APILead., must be smaller than or equal to 255.');
        }
        if ((strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name organization_name
     *
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        if (!is_null($organization_name) && (strlen($organization_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $organization_name when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($organization_name) && (strlen($organization_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $organization_name when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (strlen($phone_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($phone_number) && (strlen($phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string $mobile_phone_number mobile_phone_number
     *
     * @return $this
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (!is_null($mobile_phone_number) && (strlen($mobile_phone_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($mobile_phone_number) && (strlen($mobile_phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number fax_number
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (!is_null($fax_number) && (strlen($fax_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($fax_number) && (strlen($fax_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (strlen($email_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($email_address) && (strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        if (!is_null($website_url) && (strlen($website_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($website_url) && (strlen($website_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets converted
     *
     * @return bool
     */
    public function getConverted()
    {
        return $this->container['converted'];
    }

    /**
     * Sets converted
     *
     * @param bool $converted converted
     *
     * @return $this
     */
    public function setConverted($converted)
    {
        $this->container['converted'] = $converted;

        return $this;
    }

    /**
     * Gets converted_date_utc
     *
     * @return \DateTime
     */
    public function getConvertedDateUtc()
    {
        return $this->container['converted_date_utc'];
    }

    /**
     * Sets converted_date_utc
     *
     * @param \DateTime $converted_date_utc converted_date_utc
     *
     * @return $this
     */
    public function setConvertedDateUtc($converted_date_utc)
    {
        $this->container['converted_date_utc'] = $converted_date_utc;

        return $this;
    }

    /**
     * Gets converted_contact_id
     *
     * @return int
     */
    public function getConvertedContactId()
    {
        return $this->container['converted_contact_id'];
    }

    /**
     * Sets converted_contact_id
     *
     * @param int $converted_contact_id converted_contact_id
     *
     * @return $this
     */
    public function setConvertedContactId($converted_contact_id)
    {
        $this->container['converted_contact_id'] = $converted_contact_id;

        return $this;
    }

    /**
     * Gets converted_organization_id
     *
     * @return int
     */
    public function getConvertedOrganizationId()
    {
        return $this->container['converted_organization_id'];
    }

    /**
     * Sets converted_organization_id
     *
     * @param int $converted_organization_id converted_organization_id
     *
     * @return $this
     */
    public function setConvertedOrganizationId($converted_organization_id)
    {
        $this->container['converted_organization_id'] = $converted_organization_id;

        return $this;
    }

    /**
     * Gets converted_opportunity_id
     *
     * @return int
     */
    public function getConvertedOpportunityId()
    {
        return $this->container['converted_opportunity_id'];
    }

    /**
     * Sets converted_opportunity_id
     *
     * @param int $converted_opportunity_id converted_opportunity_id
     *
     * @return $this
     */
    public function setConvertedOpportunityId($converted_opportunity_id)
    {
        $this->container['converted_opportunity_id'] = $converted_opportunity_id;

        return $this;
    }

    /**
     * Gets visible_to
     *
     * @return string
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     *
     * @param string $visible_to visible_to
     *
     * @return $this
     */
    public function setVisibleTo($visible_to)
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return int
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param int $responsible_user_id responsible_user_id
     *
     * @return $this
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        if (!is_null($industry) && (strlen($industry) > 128)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling APILead., must be smaller than or equal to 128.');
        }
        if (!is_null($industry) && (strlen($industry) < 0)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets lead_status_id
     *
     * @return int
     */
    public function getLeadStatusId()
    {
        return $this->container['lead_status_id'];
    }

    /**
     * Sets lead_status_id
     *
     * @param int $lead_status_id lead_status_id
     *
     * @return $this
     */
    public function setLeadStatusId($lead_status_id)
    {
        $this->container['lead_status_id'] = $lead_status_id;

        return $this;
    }

    /**
     * Gets lead_source_id
     *
     * @return int
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     *
     * @param int $lead_source_id lead_source_id
     *
     * @return $this
     */
    public function setLeadSourceId($lead_source_id)
    {
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets visible_team_id
     *
     * @return int
     */
    public function getVisibleTeamId()
    {
        return $this->container['visible_team_id'];
    }

    /**
     * Sets visible_team_id
     *
     * @param int $visible_team_id visible_team_id
     *
     * @return $this
     */
    public function setVisibleTeamId($visible_team_id)
    {
        $this->container['visible_team_id'] = $visible_team_id;

        return $this;
    }

    /**
     * Gets employee_count
     *
     * @return int
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     *
     * @param int $employee_count employee_count
     *
     * @return $this
     */
    public function setEmployeeCount($employee_count)
    {
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets lead_rating
     *
     * @return int
     */
    public function getLeadRating()
    {
        return $this->container['lead_rating'];
    }

    /**
     * Sets lead_rating
     *
     * @param int $lead_rating lead_rating
     *
     * @return $this
     */
    public function setLeadRating($lead_rating)
    {
        $this->container['lead_rating'] = $lead_rating;

        return $this;
    }

    /**
     * Gets lead_description
     *
     * @return string
     */
    public function getLeadDescription()
    {
        return $this->container['lead_description'];
    }

    /**
     * Sets lead_description
     *
     * @param string $lead_description lead_description
     *
     * @return $this
     */
    public function setLeadDescription($lead_description)
    {
        if (!is_null($lead_description) && (strlen($lead_description) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $lead_description when calling APILead., must be smaller than or equal to 4000.');
        }
        if (!is_null($lead_description) && (strlen($lead_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $lead_description when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['lead_description'] = $lead_description;

        return $this;
    }

    /**
     * Gets visible_user_ids
     *
     * @return string
     */
    public function getVisibleUserIds()
    {
        return $this->container['visible_user_ids'];
    }

    /**
     * Sets visible_user_ids
     *
     * @param string $visible_user_ids visible_user_ids
     *
     * @return $this
     */
    public function setVisibleUserIds($visible_user_ids)
    {
        $this->container['visible_user_ids'] = $visible_user_ids;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \Swagger\Client\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        if (!is_null($address_street) && (strlen($address_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($address_street) && (strlen($address_street) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_street when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        if (!is_null($address_city) && (strlen($address_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($address_city) && (strlen($address_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     *
     * @return string
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     *
     * @param string $address_state address_state
     *
     * @return $this
     */
    public function setAddressState($address_state)
    {
        if (!is_null($address_state) && (strlen($address_state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_state when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($address_state) && (strlen($address_state) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_state when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_postcode
     *
     * @return string
     */
    public function getAddressPostcode()
    {
        return $this->container['address_postcode'];
    }

    /**
     * Sets address_postcode
     *
     * @param string $address_postcode address_postcode
     *
     * @return $this
     */
    public function setAddressPostcode($address_postcode)
    {
        if (!is_null($address_postcode) && (strlen($address_postcode) > 128)) {
            throw new \InvalidArgumentException('invalid length for $address_postcode when calling APILead., must be smaller than or equal to 128.');
        }
        if (!is_null($address_postcode) && (strlen($address_postcode) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_postcode when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['address_postcode'] = $address_postcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        if (!is_null($address_country) && (strlen($address_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($address_country) && (strlen($address_country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\APITag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (strlen($image_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling APILead., must be smaller than or equal to 255.');
        }
        if (!is_null($image_url) && (strlen($image_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling APILead., must be bigger than or equal to 0.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit can_edit
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete can_delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

