<?php
/**
 * APIUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * APIUser Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APIUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'int',
        'contact_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'timezone_id' => 'string',
        'email_address' => 'string',
        'email_dropbox_identifier' => 'string',
        'email_dropbox_address' => 'string',
        'administrator' => 'bool',
        'account_owner' => 'bool',
        'active' => 'bool',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'user_currency' => 'string',
        'contact_display' => 'string',
        'contact_order' => 'string',
        'task_week_start' => 'int',
        'instance_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => 'int64',
        'contact_id' => 'int64',
        'first_name' => null,
        'last_name' => null,
        'timezone_id' => null,
        'email_address' => null,
        'email_dropbox_identifier' => null,
        'email_dropbox_address' => null,
        'administrator' => null,
        'account_owner' => null,
        'active' => null,
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time',
        'user_currency' => null,
        'contact_display' => null,
        'contact_order' => null,
        'task_week_start' => 'int32',
        'instance_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'USER_ID',
        'contact_id' => 'CONTACT_ID',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'timezone_id' => 'TIMEZONE_ID',
        'email_address' => 'EMAIL_ADDRESS',
        'email_dropbox_identifier' => 'EMAIL_DROPBOX_IDENTIFIER',
        'email_dropbox_address' => 'EMAIL_DROPBOX_ADDRESS',
        'administrator' => 'ADMINISTRATOR',
        'account_owner' => 'ACCOUNT_OWNER',
        'active' => 'ACTIVE',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'user_currency' => 'USER_CURRENCY',
        'contact_display' => 'CONTACT_DISPLAY',
        'contact_order' => 'CONTACT_ORDER',
        'task_week_start' => 'TASK_WEEK_START',
        'instance_id' => 'INSTANCE_ID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'contact_id' => 'setContactId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'timezone_id' => 'setTimezoneId',
        'email_address' => 'setEmailAddress',
        'email_dropbox_identifier' => 'setEmailDropboxIdentifier',
        'email_dropbox_address' => 'setEmailDropboxAddress',
        'administrator' => 'setAdministrator',
        'account_owner' => 'setAccountOwner',
        'active' => 'setActive',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'user_currency' => 'setUserCurrency',
        'contact_display' => 'setContactDisplay',
        'contact_order' => 'setContactOrder',
        'task_week_start' => 'setTaskWeekStart',
        'instance_id' => 'setInstanceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'contact_id' => 'getContactId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'timezone_id' => 'getTimezoneId',
        'email_address' => 'getEmailAddress',
        'email_dropbox_identifier' => 'getEmailDropboxIdentifier',
        'email_dropbox_address' => 'getEmailDropboxAddress',
        'administrator' => 'getAdministrator',
        'account_owner' => 'getAccountOwner',
        'active' => 'getActive',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'user_currency' => 'getUserCurrency',
        'contact_display' => 'getContactDisplay',
        'contact_order' => 'getContactOrder',
        'task_week_start' => 'getTaskWeekStart',
        'instance_id' => 'getInstanceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['timezone_id'] = isset($data['timezone_id']) ? $data['timezone_id'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['email_dropbox_identifier'] = isset($data['email_dropbox_identifier']) ? $data['email_dropbox_identifier'] : null;
        $this->container['email_dropbox_address'] = isset($data['email_dropbox_address']) ? $data['email_dropbox_address'] : null;
        $this->container['administrator'] = isset($data['administrator']) ? $data['administrator'] : null;
        $this->container['account_owner'] = isset($data['account_owner']) ? $data['account_owner'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['user_currency'] = isset($data['user_currency']) ? $data['user_currency'] : null;
        $this->container['contact_display'] = isset($data['contact_display']) ? $data['contact_display'] : null;
        $this->container['contact_order'] = isset($data['contact_order']) ? $data['contact_order'] : null;
        $this->container['task_week_start'] = isset($data['task_week_start']) ? $data['task_week_start'] : null;
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets timezone_id
     *
     * @return string
     */
    public function getTimezoneId()
    {
        return $this->container['timezone_id'];
    }

    /**
     * Sets timezone_id
     *
     * @param string $timezone_id timezone_id
     *
     * @return $this
     */
    public function setTimezoneId($timezone_id)
    {
        $this->container['timezone_id'] = $timezone_id;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets email_dropbox_identifier
     *
     * @return string
     */
    public function getEmailDropboxIdentifier()
    {
        return $this->container['email_dropbox_identifier'];
    }

    /**
     * Sets email_dropbox_identifier
     *
     * @param string $email_dropbox_identifier email_dropbox_identifier
     *
     * @return $this
     */
    public function setEmailDropboxIdentifier($email_dropbox_identifier)
    {
        $this->container['email_dropbox_identifier'] = $email_dropbox_identifier;

        return $this;
    }

    /**
     * Gets email_dropbox_address
     *
     * @return string
     */
    public function getEmailDropboxAddress()
    {
        return $this->container['email_dropbox_address'];
    }

    /**
     * Sets email_dropbox_address
     *
     * @param string $email_dropbox_address email_dropbox_address
     *
     * @return $this
     */
    public function setEmailDropboxAddress($email_dropbox_address)
    {
        $this->container['email_dropbox_address'] = $email_dropbox_address;

        return $this;
    }

    /**
     * Gets administrator
     *
     * @return bool
     */
    public function getAdministrator()
    {
        return $this->container['administrator'];
    }

    /**
     * Sets administrator
     *
     * @param bool $administrator administrator
     *
     * @return $this
     */
    public function setAdministrator($administrator)
    {
        $this->container['administrator'] = $administrator;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return bool
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param bool $account_owner account_owner
     *
     * @return $this
     */
    public function setAccountOwner($account_owner)
    {
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets user_currency
     *
     * @return string
     */
    public function getUserCurrency()
    {
        return $this->container['user_currency'];
    }

    /**
     * Sets user_currency
     *
     * @param string $user_currency user_currency
     *
     * @return $this
     */
    public function setUserCurrency($user_currency)
    {
        $this->container['user_currency'] = $user_currency;

        return $this;
    }

    /**
     * Gets contact_display
     *
     * @return string
     */
    public function getContactDisplay()
    {
        return $this->container['contact_display'];
    }

    /**
     * Sets contact_display
     *
     * @param string $contact_display contact_display
     *
     * @return $this
     */
    public function setContactDisplay($contact_display)
    {
        $this->container['contact_display'] = $contact_display;

        return $this;
    }

    /**
     * Gets contact_order
     *
     * @return string
     */
    public function getContactOrder()
    {
        return $this->container['contact_order'];
    }

    /**
     * Sets contact_order
     *
     * @param string $contact_order contact_order
     *
     * @return $this
     */
    public function setContactOrder($contact_order)
    {
        $this->container['contact_order'] = $contact_order;

        return $this;
    }

    /**
     * Gets task_week_start
     *
     * @return int
     */
    public function getTaskWeekStart()
    {
        return $this->container['task_week_start'];
    }

    /**
     * Sets task_week_start
     *
     * @param int $task_week_start task_week_start
     *
     * @return $this
     */
    public function setTaskWeekStart($task_week_start)
    {
        $this->container['task_week_start'] = $task_week_start;

        return $this;
    }

    /**
     * Gets instance_id
     *
     * @return int
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param int $instance_id instance_id
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

